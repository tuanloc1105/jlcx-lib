Example of a manual connection handling

```java
public void removeClient(final BigDecimal id) {
    try (
            final var way4Con = way4.get();
            final var eocCon = eocd.get();
    ) {
        ConnectionContext.set("way4", way4Con);
        ConnectionContext.set("eocd", eocCon);
        way4Con.setAutoCommit(false);
        eocCon.setAutoCommit(false);
        try {
            // do something
            try {
                way4Con.commit();
                eocCon.commit();
            } catch (SQLException e) {
                LogUtils.writeLog(e.getMessage(), e);
                throw e;
            }
        } catch (Exception e) {
            try {
                way4Con.rollback();
            } catch (SQLException sqlException) {
                LogUtils.writeLog(sqlException.getMessage(), sqlException);
            }
            try {
                eocCon.rollback();
            } catch (SQLException sqlException) {
                LogUtils.writeLog(sqlException.getMessage(), sqlException);
            }
        } finally {
            try {
                way4Con.setAutoCommit(true);
            } catch (SQLException e) {
                LogUtils.writeLog(e.getMessage(), e);
            }
            try {
                eocCon.setAutoCommit(true);
            } catch (SQLException e) {
                LogUtils.writeLog(e.getMessage(), e);
            }
        }
    } catch (SQLException e) {
        LogUtils.writeLog(e.getMessage(), e);
        throw new InternalServiceException(ErrorCodeEnums.INTERNAL_ERROR);
    } finally {
        ConnectionContext.clear("way4");
        ConnectionContext.clear("eocd");
    }
}
```

Socket

```java
import io.vertx.core.Vertx;
import io.vertx.core.net.NetServer;
import io.vertx.core.net.NetSocket;

public class TcpServerVertx {
    public static void main(String[] args) {
        Vertx vertx = Vertx.vertx();

        NetServer server = vertx.createNetServer();

        server.connectHandler(socket -> handleClient(socket));

        server.listen(1234, res -> {
            if (res.succeeded()) {
                System.out.println("Server is now listening on port 1234");
            } else {
                System.out.println("Failed to bind: " + res.cause());
            }
        });
    }

    private static void handleClient(NetSocket socket) {
        String clientInfo = socket.remoteAddress().host() + ":" + socket.remoteAddress().port();
        System.out.println("New client connected: " + clientInfo);

        // Read data from client
        socket.handler(buffer -> {
            String data = buffer.toString();
            System.out.println("Received from " + clientInfo + ": " + data);

            // Send response data to client
            socket.write("Echo: " + data);
        });

        // Handle client disconnection event
        socket.closeHandler(v -> {
            System.out.println("Client disconnected: " + clientInfo);
        });

        // Handle exception
        socket.exceptionHandler(err -> {
            System.err.println("Error with client " + clientInfo + ": " + err.getMessage());
        });
    }
}
```
