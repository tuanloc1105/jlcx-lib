    public void save(${entity-class} entity) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            currentSessionInContext.persist(entity);
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                currentSessionInContext.persist(entity);
                transaction.commit();
            }
        }
    }

    public void update(${entity-class} entity) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            currentSessionInContext.merge(entity);
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                currentSessionInContext.merge(entity);
                transaction.commit();
            }
        }
    }

    public void delete(${entity-class} entity) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            currentSessionInContext.remove(entity);
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                currentSessionInContext.remove(entity);
                transaction.commit();
            }
        }
    }

    public void save(java.util.List<${entity-class}> entities) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            // for (int i = 0; i < entities.size(); i++) {
            //     currentSessionInContext.save(entities.get(i));
            //     if (i > 0 && i % 50 == 0) {
            //         currentSessionInContext.flush();
            //         currentSessionInContext.clear();
            //     }
            // }
            vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
            final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
            batchHandler.processListInBatches(
                    entities,
                    splitEntities -> {
                        for (${entity-class} entity : splitEntities) {
                            try {
                                finalCurrentSessionInContext.persist(entity);
                            } catch (java.lang.Throwable t) {
                                finalCurrentSessionInContext.merge(entity);
                            }
                        }
                        finalCurrentSessionInContext.flush();
                        finalCurrentSessionInContext.clear();
                    },
                    50
            );
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                // for (int i = 0; i < entities.size(); i++) {
                //     currentSessionInContext.save(entities.get(i));
                //     if (i > 0 && i % 50 == 0) {
                //         currentSessionInContext.flush();
                //         currentSessionInContext.clear();
                //     }
                // }
                vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
                final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
                batchHandler.processListInBatches(
                        entities,
                        splitEntities -> {
                            for (${entity-class} entity : splitEntities) {
                                try {
                                    finalCurrentSessionInContext.persist(entity);
                                } catch (java.lang.Throwable t) {
                                    finalCurrentSessionInContext.merge(entity);
                                }
                            }
                            finalCurrentSessionInContext.flush();
                            finalCurrentSessionInContext.clear();
                        },
                        50
                );
                transaction.commit();
            }
        }
    }

    public void update(java.util.List<${entity-class}> entities) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            // for (int i = 0; i < entities.size(); i++) {
            //     currentSessionInContext.merge(entities.get(i));
            //     if (i > 0 && i % 50 == 0) {
            //         currentSessionInContext.flush();
            //         currentSessionInContext.clear();
            //     }
            // }
            vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
            final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
            batchHandler.processListInBatches(
                    entities,
                    splitEntities -> {
                        for (${entity-class} entity : splitEntities) {
                            finalCurrentSessionInContext.merge(entity);
                        }
                        finalCurrentSessionInContext.flush();
                        finalCurrentSessionInContext.clear();
                    },
                    50
            );
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                // for (int i = 0; i < entities.size(); i++) {
                //     currentSessionInContext.merge(entities.get(i));
                //     if (i > 0 && i % 50 == 0) {
                //         currentSessionInContext.flush();
                //         currentSessionInContext.clear();
                //     }
                // }
                vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
                final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
                batchHandler.processListInBatches(
                        entities,
                        splitEntities -> {
                            for (${entity-class} entity : splitEntities) {
                                finalCurrentSessionInContext.merge(entity);
                            }
                            finalCurrentSessionInContext.flush();
                            finalCurrentSessionInContext.clear();
                        },
                        50
                );
                transaction.commit();
            }
        }
    }

    public void delete(java.util.List<${entity-class}> entities) {
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            // for (int i = 0; i < entities.size(); i++) {
            //     currentSessionInContext.remove(entities.get(i));
            //     if (i > 0 && i % 50 == 0) {
            //         currentSessionInContext.flush();
            //         currentSessionInContext.clear();
            //     }
            // }
            vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
            final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
            batchHandler.processListInBatches(
                    entities,
                    splitEntities -> {
                        for (${entity-class} entity : splitEntities) {
                            finalCurrentSessionInContext.remove(entity);
                        }
                        finalCurrentSessionInContext.flush();
                        finalCurrentSessionInContext.clear();
                    },
                    50
            );
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                org.hibernate.Transaction transaction = currentSessionInContext.beginTransaction();
                // for (int i = 0; i < entities.size(); i++) {
                //     currentSessionInContext.remove(entities.get(i));
                //     if (i > 0 && i % 50 == 0) {
                //         currentSessionInContext.flush();
                //         currentSessionInContext.clear();
                //     }
                // }
                vn.com.lcx.common.task.batch.BatchHandler batchHandler = new vn.com.lcx.common.task.batch.BatchHandler();
                final org.hibernate.Session finalCurrentSessionInContext = currentSessionInContext;
                batchHandler.processListInBatches(
                        entities,
                        splitEntities -> {
                            for (${entity-class} entity : splitEntities) {
                                finalCurrentSessionInContext.remove(entity);
                            }
                            finalCurrentSessionInContext.flush();
                            finalCurrentSessionInContext.clear();
                        },
                        50
                );
                transaction.commit();
            }
        }
    }

    public java.util.List<${entity-class}> find(vn.com.lcx.jpa.respository.CriteriaHandler<${entity-class}> handler) {
        java.util.List<${entity-class}> result = new java.util.ArrayList<>();
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
            final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
            jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
            criteriaQuery.select(root);
            jakarta.persistence.criteria.Predicate predicate = null;
            if (handler != null) {
                predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                criteriaQuery.where(predicate);
            }
            org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
            result.addAll(query.getResultList());
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
                final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
                jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
                criteriaQuery.select(root);
                jakarta.persistence.criteria.Predicate predicate = null;
                if (handler != null) {
                    predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                    criteriaQuery.where(predicate);
                }
                org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
                result.addAll(query.getResultList());
            }
        }
        return result;
    }

    public java.util.Optional<${entity-class}> findOne(vn.com.lcx.jpa.respository.CriteriaHandler<${entity-class}> handler) {
        java.util.Optional<${entity-class}> result = java.util.Optional.empty();
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
            final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
            jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
            criteriaQuery.select(root);
            jakarta.persistence.criteria.Predicate predicate = null;
            if (handler != null) {
                predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                criteriaQuery.where(predicate);
            }
            org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
            result = java.util.Optional.ofNullable(query.uniqueResult());
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
                final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
                jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
                criteriaQuery.select(root);
                jakarta.persistence.criteria.Predicate predicate = null;
                if (handler != null) {
                    predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                    criteriaQuery.where(predicate);
                }
                org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
                result = java.util.Optional.ofNullable(query.uniqueResult());
            }
        }
        return result;
    }

    public vn.com.lcx.common.database.pageable.Page<${entity-class}> find(vn.com.lcx.jpa.respository.CriteriaHandler<${entity-class}> handler, vn.com.lcx.common.database.pageable.Pageable pageable) {
        java.util.concurrent.atomic.AtomicReference<vn.com.lcx.common.database.pageable.Page<${entity-class}>> result = new java.util.concurrent.atomic.AtomicReference<>();
        final org.hibernate.SessionFactory sessionFactory = vn.com.lcx.jpa.context.EntityContainer.getEntityManager(${entity-class}.class);
        // This variable is the result of checking whether the method
        // in the class annotated with `@vn.com.lcx.jpa.annotation.Service`
        // is also annotated with `@vn.com.lcx.jpa.annotation.Transactional`.
        // This check occurs in the Proxy layer of the class annotated with `@vn.com.lcx.jpa.annotation.Service`.
        boolean transactionOpen = vn.com.lcx.jpa.context.JpaContext.isTransactionOpen();
        if (transactionOpen) {
            boolean sessionIsJustCreate = false;
            org.hibernate.Session currentSessionInContext = vn.com.lcx.jpa.context.JpaContext.getSession(${entity-class}.class);
            if (currentSessionInContext == null) {
                currentSessionInContext = sessionFactory.openSession();
                currentSessionInContext.doWork(connection -> connection.setTransactionIsolation(vn.com.lcx.jpa.context.JpaContext.getTransactionIsolation()));
                sessionIsJustCreate = true;
            }
            int transactionMode = vn.com.lcx.jpa.context.JpaContext.getTransactionMode();
            org.hibernate.Transaction transaction = vn.com.lcx.jpa.context.JpaContext.getTransaction(${entity-class}.class);
            switch (transactionMode) {
                case vn.com.lcx.jpa.context.JpaConstant.CREATE_NEW_TRANSACTION_MODE:
                    if (sessionIsJustCreate) {
                        transaction = currentSessionInContext.beginTransaction();
                    } else {
                        if (transaction != null) {
                            transaction.commit();
                        }
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                case vn.com.lcx.jpa.context.JpaConstant.USE_EXISTING_TRANSACTION_MODE:
                    if (transaction == null) {
                        transaction = currentSessionInContext.beginTransaction();
                    }
                    break;
                default:
                    throw new vn.com.lcx.jpa.exception.JpaException("Invalid transaction mode");
            }
            vn.com.lcx.jpa.context.JpaContext.setSession(${entity-class}.class, currentSessionInContext);
            vn.com.lcx.jpa.context.JpaContext.setTransaction(${entity-class}.class, transaction);
            vn.com.lcx.common.database.pageable.PageableImpl pageimpl = (vn.com.lcx.common.database.pageable.PageableImpl) pageable;
            final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
            final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
            jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
            java.util.List<jakarta.persistence.criteria.Order> orders = new java.util.ArrayList<>();
            pageimpl.getFieldNameAndDirectionMap().forEach((field, direction) -> {
                if (vn.com.lcx.common.database.pageable.Direction.DESC.equals(direction)) {
                    orders.add(criteriaBuilder.desc(root.get(field)));
                } else {
                    orders.add(criteriaBuilder.asc(root.get(field)));
                }
            });
            criteriaQuery.select(root).orderBy(orders);
            jakarta.persistence.criteria.Predicate predicate = null;
            if (handler != null) {
                predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                criteriaQuery.where(predicate);
            }
            org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
            query.setFirstResult(pageimpl.getOffset());
            query.setMaxResults(pageimpl.getPageSize());
            java.util.List<${entity-class}> queryResult = query.getResultList();

            final jakarta.persistence.criteria.CriteriaQuery<Long> countQuery = criteriaBuilder.createQuery(Long.class);
            jakarta.persistence.criteria.Root<${entity-class}> countRoot = countQuery.from(${entity-class}.class);
            if (handler != null) {
                jakarta.persistence.criteria.Predicate countPredicate = handler.toPredicate(criteriaBuilder, countQuery, countRoot);
                countQuery.select(criteriaBuilder.count(countRoot))
                        .where(countPredicate);
            }
            Long totalItems = currentSessionInContext.createQuery(countQuery).getSingleResult();

            result.set(
                    vn.com.lcx.common.database.pageable.Page.<${entity-class}>create(
                            queryResult,
                            totalItems,
                            pageimpl.getPageNumber(),
                            pageimpl.getPageSize()
                    )
            );
        } else {
            try (org.hibernate.Session currentSessionInContext = sessionFactory.openSession()) {
                vn.com.lcx.common.database.pageable.PageableImpl pageimpl = (vn.com.lcx.common.database.pageable.PageableImpl) pageable;
                final jakarta.persistence.criteria.CriteriaBuilder criteriaBuilder = currentSessionInContext.getCriteriaBuilder();
                final jakarta.persistence.criteria.CriteriaQuery<${entity-class}> criteriaQuery = criteriaBuilder.createQuery(${entity-class}.class);
                jakarta.persistence.criteria.Root<${entity-class}> root = criteriaQuery.from(${entity-class}.class);
                java.util.List<jakarta.persistence.criteria.Order> orders = new java.util.ArrayList<>();
                pageimpl.getFieldNameAndDirectionMap().forEach((field, direction) -> {
                    if (vn.com.lcx.common.database.pageable.Direction.DESC.equals(direction)) {
                        orders.add(criteriaBuilder.desc(root.get(field)));
                    } else {
                        orders.add(criteriaBuilder.asc(root.get(field)));
                    }
                });
                criteriaQuery.select(root).orderBy(orders);
                jakarta.persistence.criteria.Predicate predicate = null;
                if (handler != null) {
                    predicate = handler.toPredicate(criteriaBuilder, criteriaQuery, root);
                    criteriaQuery.where(predicate);
                }
                org.hibernate.query.Query<${entity-class}> query = currentSessionInContext.createQuery(criteriaQuery);
                query.setFirstResult(pageimpl.getOffset());
                query.setMaxResults(pageimpl.getPageSize());
                java.util.List<${entity-class}> queryResult = query.getResultList();

                final jakarta.persistence.criteria.CriteriaQuery<Long> countQuery = criteriaBuilder.createQuery(Long.class);
                jakarta.persistence.criteria.Root<${entity-class}> countRoot = countQuery.from(${entity-class}.class);
                if (handler != null) {
                    jakarta.persistence.criteria.Predicate countPredicate = handler.toPredicate(criteriaBuilder, countQuery, countRoot);
                    countQuery.select(criteriaBuilder.count(countRoot))
                            .where(countPredicate);
                }
                Long totalItems = currentSessionInContext.createQuery(countQuery).getSingleResult();

                result.set(
                        vn.com.lcx.common.database.pageable.Page.<${entity-class}>create(
                                queryResult,
                                totalItems,
                                pageimpl.getPageNumber(),
                                pageimpl.getPageSize()
                        )
                );
            }
        }
        return result.get();
    }
